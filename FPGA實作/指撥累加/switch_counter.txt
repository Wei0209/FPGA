module switch_counter(
    input clk,
    input reset,
    input button,
	 input [3:0] sw,
    output reg [3:0] oCount
);

    reg button_reg;
	 reg [3:0] count;
    always @(posedge clk or negedge reset) begin
        if (!reset) begin
            button_reg <= 0;
        end else begin
            button_reg <= button;
        end
    end

always @(posedge clk or negedge reset) begin
        if (!reset) begin
            oCount <= 4'b0000;
        end else if (button_reg && !button) begin
            if (sw) begin
                if (oCount == 4'd9) begin
                    oCount <= 4'b0000;
                end else begin
                    oCount <= oCount + 1'b1;
                end
            end
        end
    end
endmodule

module SevenSegment2(clk, reset, SW_digit, osig);
input clk;
input reset;
input [3:0] SW_digit;
output [6:0] osig;
reg [6:0] segment_state;
	 
always @(SW_digit) begin
    case(SW_digit)
        4'b0000: segment_state = 7'b_011_1111;  // "0" 
        4'b0001: segment_state = 7'b_000_0110;  // "1" 
        4'b0010: segment_state = 7'b_101_1011;  // "2"
        4'b0011: segment_state = 7'b_100_1111;  // "3" 
        4'b0100: segment_state = 7'b_110_0110;  // "4" 
        4'b0101: segment_state = 7'b_110_1101;  // "5" 
        4'b0110: segment_state = 7'b_111_1101;  // "6" 
        4'b0111: segment_state = 7'b_000_0111;  // "7" 
        4'b1000: segment_state = 7'b_111_1111;  // "8" 
        4'b1001: segment_state = 7'b_110_1111;  // "9" 
        default: segment_state = 7'b_000_0000;
    endcase
end
assign osig  = ~segment_state;
endmodule

